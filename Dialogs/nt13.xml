<?xml version="1.0"?>
<PropertyList>
  <name>nt13</name>
  <modal>false</modal>
  <layout>vbox</layout>
	<color>
		<alpha>1</alpha>
	</color>  

  <group>
    <layout>hbox</layout>
    <empty><stretch>1</stretch></empty>

    <text>
      <label>Missed Approach - Go Around</label>
    </text>

    <empty><stretch>1</stretch></empty>

	<button>
		<halign>right</halign>
		<pref-width>20</pref-width>
		<pref-height>20</pref-height>
		<legend>X</legend>
		<key>Esc</key>
		<binding>
			<command>dialog-close</command>
		</binding>
	</button>
  </group>

  <hrule/>

  <group>
			<layout>vbox</layout>			
			<textbox>
                    <name>patterns</name>
                    <halign>fill</halign>
                    <stretch>true</stretch>
                    <pref-height>300</pref-height>
                    <height>300</height>
                    <pref-width>480</pref-width>
                    <editable>false</editable>
                    <wrap>true</wrap>
                    <live>true</live>
                    <top-line>0</top-line>
                    <property>/sim/mapp</property>
                </textbox>			
			
		</group>

<hrule/>

  <button>
    <legend>Run</legend>
    <default>true</default>
    <key>Esc</key>
		<binding>
	<command>nasal</command>
	<script>
		var window = screen.window.new(nil, -65, 1, 5);
		window.fg = [1, 1, 1, 1];
		window.align = "left";
		window.write("Please wait, loading...",1,1,0 );
	</script>
	</binding>
	
    <binding>
      <command>nasal</command>
		<script>
			  setprop("/controls/engines/engine/magnetos", 0);
     setprop("/controls/switches/avionics-master", 0);				    	
			libraries.cleanup();
			setprop("/environment/weather-scenario", "Core high pressure region");
fgcommand("timeofday", props.Node.new({ "timeofday" : "morning" }));
		setprop("/systems/saloft",1);
		setprop("/options/trm",13);
		setprop("/systems/bp",1);								
		setprop("/systems/nora",0);
		setprop("/sim/freeze/clock",1);
		var apid = "mhtg";
		var rwid = "02";
		var alti = 4100;
		var spd = 80;
		var dist = 1.2;	
	if (getprop("/systems/saloft") == 1)  {
	setprop("/sim/presets/running", 1);
	setprop("/controls/electrical/battery", 1);
     	setprop("/controls/electrical/alternator", 1);
  	setprop("/controls/switches/avionics-master", 1);
  	setprop("/controls/engines/engine[0]/magnetos-switch", 3);
  	setprop("/controls/switches/fuel-pump", 1);
  	setprop("/controls/engines/engine/throttle", 1);
  	setprop("/controls/engines/engine/mixture", 1);
	setprop("/controls/engines/engine[0]/magnetos-switch", 4);
	setprop("/controls/engines/engine/running", 1);
	setprop("/controls/engines/engine[0]/magnetos-switch", 3);
	setprop("/controls/switches/panel-lights-factor", 1);
	setprop("/controls/switches/nav-lights", 1);
	setprop("/controls/switches/nav-lights-factor", 1);
	setprop("/controls/switches/strobe-lights", 1);	
  	setprop("/controls/switches/panel-lights-factor", 1);
  	setprop("/controls/flight/elevator", -0.009);
	setprop("/orientation/pitch-deg",0.5);
	setprop("/it-autoflight/input/ap", 1);	
	setprop("/it-autoflight/input/lat", 0);	
	setprop("/controls/engines/engine/throttle", 0.78);
	setprop("/controls/engines/engine/starter", 0);
	setprop("/engines/engine/fuel-pressure-psi", 4.3);
	setprop("/systems/vbo", 0);
	setprop("/systems/awc", 1);
	setprop("/systems/fl", 0);
	setprop("/controls/flight/flaps", 0.25);
	setprop("/systems/nonav1",0);
	setprop("/systems/nonav2",0);
	setprop("/instrumentation/altimeter/setting-hpa", 1025);

	setprop("/instrumentation/nav/frequencies/selected-mhz", 112.3);
		setprop("/instrumentation/nav/radials/selected-deg", 08);
	setprop("/instrumentation/heading-indicator/indicated-heading-deg", 02);		

	if (getprop("/systems/nbat")== 0) {

	var inc = props.globals.getNode("/systems/starts");
	inc.setValue(inc.getValue() + 1);
	}
	if (getprop("/systems/starts") > 321)  {

	logger.screen.red("Electrical systems malfunction,
engine can not start, please restart on the ground
and replace your depleted battery", 3);
	}
}
	aircraft.teleport(airport = apid, runway = rwid,lat = 99999, lon = 99999, alt = alti,
		speed = spd, distance = dist, azimuth = 0, glideslope = 0, heading = 0) ;
	setprop("/controls/gear/brake-parking", 0);
	davtron803.davtron_flight_time.reset();
	davtron803.davtron_flight_time.start();
fgcommand("timeofday", props.Node.new({ "timeofday" : "morning" }));
	
		</script>
    </binding>	

	<binding>
      <command>dialog-close</command>
    </binding>

  </button>	

</PropertyList>
